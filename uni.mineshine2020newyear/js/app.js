"use strict";var production="false"===$("#appjs").data("mode"),friendo_url=$("#appjs").data("site"),device=deviceCheck();Vue.config.devtools=!production,Vue.config.debug=!production,Vue.config.silent=production;var md=new MobileDetect(window.navigator.userAgent),tag=document.createElement("script");function findGetParameter(o){var t=null,n=[];return location.search.substr(1).split("&").forEach(function(e){(n=e.split("="))[0]===o&&(t=decodeURIComponent(n[1]))}),t}function checkCookie(o){var t=null,n=[];return document.cookie.split(";").forEach(function(e){" "==e.charAt(0)&&(e=e.substring(1)),(n=e.split("="))[0]===o&&(t=n[1])}),t}function deviceCheck(){var e={},o=new MobileDetect(window.navigator.userAgent);return o.match(/android/i)?(e.os="android",e.version=o.version("android")):o.match(/(iphone|ipad|ipod);?/i)?(e.os="ios",e.version=o.version("iOS")):(e.os="pc",e.version=o.version("Chrome")),e}$(function(){console.log("v1.0"),console.log(device),$(".nav").menu()}),Vue.mixin({data:function(){return{status:"",start_date:"2100/08/09 12:09:10",error_msg:"",popuptop:"",navHeight:"",rewardShake:!0,lineHref:"",gToken:"",reCaptcha:"",popup:!1,popEvent:"",popPage:"",resultLoad:!1,loading:!1,oops:1}},computed:{openCome:function(){return!("Testing"==this.mode||start_date<=0)}},watch:{error_msg:function(e){$("body").toggleClass("_freeze")}},methods:{gaEvant:function(e){dataLayer.push({event:e}),console.log("ga:",e)},server_busy:function(){var e=this;e.error_msg="系統忙碌中，請稍後在試!",e.loading=!1,e.error_cou=6},setCookie:function(e,o,t){var n=new Date;n.setTime(n.getTime()+1e3*t);var r="expires="+n.toUTCString();document.cookie=e+"="+o+";"+r+";"},logger:function(e,o,t){if(production){_LTracker.push({level:["ERROR","DEBUG","WARNING","INFO","ALL"][e],content:JSON.stringify(o),path:window.location.href,tag:t||null,device:device,timestamp:Date.now()})}},errorDone:function(){this.error_msg=""},checkOnline:function(){navigator.onLine||alert("Internet 連線已斷開，請確認您的網路狀態。")},getToken:function(){var o=this;return $.ajax({url:"".concat(friendo_url,"auth/login?projectId=73"),headers:{WebToken:"Vn2lAsVSmwjXJn8UqZZ-Ag=="},method:"GET",dataType:"json"}).done(function(e){o.gToken=e.token})},getstatus:function(){return $.ajax({url:"".concat(friendo_url,"MineShine/getstatus"),headers:{Authorization:"Bearer "+this.gToken},method:"GET",done:function(e){}})},scrollTo:function(e){var o=this;o.room=null,o.allPopupClose(),$("html,body").animate({scrollTop:$(e).offset().top-o.navHeight},500)},popupOpen:function(){var e=this;e.popuptop&&0!==e.popuptop||(e.popuptop=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop)),$("body").addClass("_freeze")},eventOpen:function(){this.popup=!0,this.popEvent="event",$("body").addClass("_freeze")},popupClose:function(){var e=this;$("body").removeClass("_freeze"),e.popEvent="",e.popPage="",e.popup=!1,e.resultLoad=!1},afterEnter:function(){this.popupOpen()},grecaptcha:function(o){function e(e){return o.apply(this,arguments)}return e.toString=function(){return o.toString()},e}(function(t){var n=this;return new Promise(function(o,e){grecaptcha.execute("6LeGFsQUAAAAAKbckoPXNx-db-ZoTjVBOBnRuFq9",{action:t}).then(function(e){n.reCaptcha=e,o()},function(){alert("Google驗證失敗，請再次嘗試\n如無法排除此問題，建議重新整理此頁面"),e()})})}),getIe:function(){var o,e;function t(e){return 0<=o.indexOf(e)}"ie"==(o=window.navigator.userAgent,e="ActiveXObject"in window,t("MSIE")||e?"ie":t("Firefox")&&!e?"Firefox":t("Chrome")&&!e?"Chrome":t("Opera")&&!e?"Opera":t("Safari")&&!e?"Safari":void 0)&&alert("目前瀏覽器為舊版 IE，建議使用Chrome瀏覽器，獲得最佳遊戲體驗！")}},components:{comingsoon:comingsoon},mounted:function(){}}),Vue.component("comingsoon",{template:"#comingsoon",props:["StartDate","mode"],data:function(){return{comingsoon:!1,comPage:"",start_date:"",mode_status:"",date:{total:0,days:0,hours:0,minutes:0,seconds:0}}},mounted:function(){function i(e,o){return(e=""+e).length>=o?e:i("0"+e,o)}var a=this;a.getToken().then(function(){a.getstatus().then(function(e){})});setInterval(function(){var e=Date.parse(new Date(a.StartDate))-Date.parse(new Date),o=Math.floor(e/1e3%60),t=Math.floor(e/1e3/60%60),n=Math.floor(e/36e5%24),r=Math.floor(e/864e5);a.date={total:e,days:i(r,2),hours:i(n,2),minutes:i(t,2),seconds:i(o,2)}},1e3)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
