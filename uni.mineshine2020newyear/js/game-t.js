"use strict";var index_view=new Vue({el:"#app",data:{fileimg:{fimg1:"",fimg2:"",fimg3:""}},methods:{readpoto:function(t){var d=this,e=t.target.files.item(0),a=t.target.id,i=new FileReader;i.addEventListener("load",function(t){if("files1"==a){d.fileimg.fimg1=t.target.result;var e=(h=document.getElementById("canvas")).getContext("2d"),i=new Image;h.width=500,h.height=500,i.onload=function(){var t=i.width/i.height;e.clearRect(0,0,500,500),500<i.width&&500<i.height?e.drawImage(i,0,0,i.width,i.height,0,0,h.width,h.width/t):500<i.width&&i.height<500?e.drawImage(i,0,0,i.width,i.height,0,0,h.width,h.width/t):500<i.height&&i.width<500?e.drawImage(i,0,0,i.width,i.height,0,0,h.width*t,h.width):e.drawImage(i,0,0,i.width,i.height)},i.src=t.target.result}if("files2"==a){d.fileimg.fimg2=t.target.result;e=(h=document.getElementById("canvas2")).getContext("2d"),i=new Image;h.width=500,h.height=500,i.onload=function(){var t=i.width/i.height;e.clearRect(0,0,500,500),500<i.width&&500<i.height?e.drawImage(i,0,0,i.width,i.height,0,0,h.width,h.width/t):500<i.width&&i.height<500?e.drawImage(i,0,0,i.width,i.height,0,0,h.width,h.width/t):500<i.height&&i.width<500?e.drawImage(i,0,0,i.width,i.height,0,0,h.width*t,h.width):e.drawImage(i,0,0,i.width,i.height)},i.src=t.target.result}if("files3"==a){d.fileimg.fimg3=t.target.result;var h;e=(h=document.getElementById("canvas3")).getContext("2d"),i=new Image;h.width=500,h.height=500,i.onload=function(){var t=i.width/i.height;e.clearRect(0,0,500,500),500<i.width&&500<i.height?e.drawImage(i,0,0,i.width,i.height,0,0,h.width,h.width/t):500<i.width&&i.height<500?e.drawImage(i,0,0,i.width,i.height,0,0,h.width,h.width/t):500<i.height&&i.width<500?e.drawImage(i,0,0,i.width,i.height,0,0,h.width*t,h.width):e.drawImage(i,0,0,i.width,i.height)},i.src=t.target.result}}),i.readAsDataURL(e)},drawLoop:function(){var I=document.getElementById("canvas"),v=document.getElementById("canvas2"),E=document.getElementById("canvas3"),y=document.getElementById("drawimg"),C=document.getElementById("drawimg2"),x=document.getElementById("drawimg3"),t=y.getContext("2d"),e=C.getContext("2d"),i=x.getContext("2d"),B=document.getElementById("cutcan"),R=document.getElementById("cutcan2"),p=document.getElementById("cutcan3"),L=B.getContext("2d"),b=R.getContext("2d"),k=p.getContext("2d");y.width=500,y.height=500,C.width=500,C.height=500,x.width=500,x.height=500,B.width=R.width=p.width=200,B.height=R.height=p.height=200,L.font=b.font=k.font="30px Comic Sans MS",L.textAlign=b.textAlign=k.textAlign="center",t.clearRect(0,0,y.width,y.height),e.clearRect(0,0,C.width,C.height),i.clearRect(0,0,x.width,x.height),L.clearRect(0,0,L.width,L.height),b.clearRect(0,0,b.width,b.height),k.clearRect(0,0,k.width,k.height);var F=new clm.tracker;F.init();var M=new clm.tracker;M.init();var P=new clm.tracker;P.init(),F.start(I),M.start(v),P.start(E),document.addEventListener("clmtrackrNotFound",function(t){console.log("照片不符合"),F.stop(),M.stop(),P.stop(),clearInterval(A)},!1);var A=setInterval(function(){!function(){var t=F.getCurrentPosition(),e=M.getCurrentPosition(),i=P.getCurrentPosition();console.log(t[0],t[7],t[14],t[21]);var h,d,a=t[1][0],n=t[21][1]-10,g=t[14][0],r=t[7][1],w=e[1][0],o=e[21][1]-10,c=e[14][0],m=e[7][1],l=i[1][0],s=i[21][1]-10,u=i[14][0],f=i[7][1];F.getCurrentPosition()&&M.getCurrentPosition()&&P.getCurrentPosition()&&(h=Math.abs(g-a),(d=Math.abs(r-n))<h?h=d:d=h,F.draw(y),L.drawImage(I,a,n,h,d,0,0,B.width,B.height),F.stop(),F.reset(),h=Math.abs(c-w),(d=Math.abs(m-o))<h?h=d:d=h,M.draw(C),b.drawImage(v,a,n,h,d,0,0,R.width,R.height),M.stop(),M.reset(),h=Math.abs(u-l),(d=Math.abs(f-s))<h?h=d:d=h,P.draw(x),k.drawImage(E,a,n,h,d,0,0,p.width,p.height),clearInterval(A),P.stop(),P.reset())}()},1e3)},game:function(){new Image;var t=document.getElementById("canvas"),n=(t.getContext("2d"),document.getElementById("drawimg"));n.getContext("2d");t.width=500,t.height=500,n.width=t.width,n.height=t.height;var h,d,g=new clm.tracker;if(g.init(),document.addEventListener("clmtrackrNotFound",function(t){g.stop(),alert("The tracking had problems with finding a face in this image. Try selecting the face in the image manually.")},!1),window.File&&window.FileReader&&window.FileList){var e=function(t){var e=t.target.files;console.log(e),h=[];for(var i=0;i<e.length;i++)e[i].type.match("image.*")&&h.push(e[i]);0<e.length&&(d=0),function(){if(h.indexOf(d)<0){var t=new FileReader;t.onload=(h[d],function(t){var e=document.getElementById("canvas"),i=e.getContext("2d"),h=document.getElementById("drawimg"),d=h.getContext("2d"),a=new Image;a.onload=function(){var t=a.width/a.height;i.clearRect(0,0,500,500),i.drawImage(a,0,0,a.width,a.height),d.clearRect(0,0,500,500),(500<a.width||500<a.height)&&(i.clearRect(0,0,e.width,e.height),i.drawImage(a,0,0,a.width,a.height,0,0,e.width,e.width/t),h.width=e.width,h.height=e.height,d.clearRect(0,0,h.width,h.height)),g.reset(),g.start(e),setTimeout(function(){g.draw(h),console.log(n.toDataURL("image/jpeg",.7))},1e3)},a.src=t.target.result}),t.readAsDataURL(h[d])}}()};document.getElementById("files1").addEventListener("change",e,!1),document.getElementById("files2").addEventListener("change",e,!1),document.getElementById("files3").addEventListener("change",e,!1)}}},mounted:function(){}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
