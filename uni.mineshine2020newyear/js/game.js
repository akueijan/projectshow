"use strict";var game_view=new Vue({el:"#app",data:{fileimg:{fimg1:"",fimg2:"",fimg3:""},resWord:{sad:[["./images/sad_1.png","./images/sad_1b.png"],["./images/sad_2.png","./images/sad_2b.png"],["./images/sad_3.png","./images/sad_3b.png"],["./images/sad_4.png","./images/sad_4b.png"],["./images/sad_5.png","./images/sad_5b.png"]],happy:[["./images/happy_1.png","./images/happy_1b.png"],["./images/happy_2.png","./images/happy_2b.png"],["./images/happy_3.png","./images/happy_3b.png"],["./images/happy_4.png","./images/happy_4b.png"],["./images/happy_5.png","./images/happy_5b.png"],["./images/happy_6.png","./images/happy_6b.png"],["./images/happy_7.png","./images/happy_7b.png"],["./images/happy_8.png","./images/happy_8b.png"],["./images/happy_9.png","./images/happy_9b.png"],["./images/happy_10.png","./images/happy_10b.png"],["./images/happy_11.png","./images/happy_11b.png"],["./images/happy_12.png","./images/happy_12b.png"],["./images/happy_13.png","./images/happy_13b.png"],["./images/happy_14.png","./images/happy_14b.png"],["./images/happy_15.png","./images/happy_15b.png"],["./images/happy_16.png","./images/happy_16b.png"],["./images/happy_17.png","./images/happy_17b.png"],["./images/happy_18.png","./images/happy_18b.png"],["./images/happy_19.png","./images/happy_19b.png"],["./images/happy_20.png","./images/happy_20b.png"]],angry:[["./images/angry_1.png","./images/angry_1b.png"],["./images/angry_2.png","./images/angry_2b.png"],["./images/angry_3.png","./images/angry_3b.png"],["./images/angry_4.png","./images/angry_4b.png"],["./images/angry_5.png","./images/angry_5b.png"],["./images/angry_6.png","./images/angry_6b.png"],["./images/angry_7.png","./images/angry_7b.png"],["./images/angry_8.png","./images/angry_8b.png"],["./images/angry_9.png","./images/angry_9b.png"],["./images/angry_10.png","./images/angry_10b.png"]],all:[]},agree:!1,fbData:{fbToken:"",fbId:"",fbName:"",fbPic:""},mbId:"",fblink:"",canvas:{fcan:"",ccan1:"",ccan2:"",ccan3:""},keyWord:{word1:"",word2:"",word3:""},errW:"",gamesec:"0%"},methods:{readpoto:function(e){var t=this,a=e.target.files.item(0),h=e.target.id,i=new FileReader;i.addEventListener("load",function(e){if("files1"==h){t.fileimg.fimg1=e.target.result;var g=(n=document.getElementById("canvas")).getContext("2d"),r=new Image;n.width=500,n.height=500,r.onload=function(){var i=r.width/r.height;g.clearRect(0,0,500,500),g.fillStyle="rgb(248,244,237)",g.fillRect(0,0,n.width,n.height),EXIF.getData(r,function(){var e=EXIF.getTag(this,"Orientation");if(console.log("orientation",e),e){var t=n.width/2,a=n.height/2,h=0;switch(e){case 3:case 4:h=180,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height);break;case 5:case 6:h=90,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height);break;case 7:case 8:h=-90,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height)}switch(e){case 2:case 4:case 5:case 7:g.scale(-1,1),g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height)}switch(e){case 1:g.drawImage(r,0,0,r.width,r.height,0,(n.height-n.width/i)/2,n.width,n.width/i)}}else 1<i?r.width<500?g.drawImage(r,0,0,r.width,r.height,(n.width-r.width)/2,(n.height-r.height)/2,r.width,r.height):g.drawImage(r,0,0,r.width,r.height,0,(n.height-n.width/i)/2,n.width,n.width/i):r.height<500?g.drawImage(r,0,0,r.width,r.height,(n.width-r.width)/2,(n.height-r.height)/2,r.width,r.height):g.drawImage(r,0,0,r.width,r.height,(n.width-n.height*i)/2,0,n.height*i,n.height)})},r.src=e.target.result}if("files2"==h){t.fileimg.fimg2=e.target.result;g=(n=document.getElementById("canvas2")).getContext("2d"),r=new Image;n.width=500,n.height=500,r.onload=function(){var i=r.width/r.height;g.clearRect(0,0,500,500),g.fillStyle="rgb(248,244,237)",g.fillRect(0,0,n.width,n.height),EXIF.getData(r,function(){var e=EXIF.getTag(this,"Orientation");if(console.log("orientation",e),e){var t=n.width/2,a=n.height/2,h=0;switch(e){case 3:case 4:h=180,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height);break;case 5:case 6:h=90,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height);break;case 7:case 8:h=-90,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height)}switch(e){case 2:case 4:case 5:case 7:g.scale(-1,1),g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height)}switch(e){case 1:g.drawImage(r,0,0,r.width,r.height,0,(n.height-n.width/i)/2,n.width,n.width/i)}}else 1<i?r.width<500?g.drawImage(r,0,0,r.width,r.height,(n.width-r.width)/2,(n.height-r.height)/2,r.width,r.height):g.drawImage(r,0,0,r.width,r.height,0,(n.height-n.width/i)/2,n.width,n.width/i):r.height<500?g.drawImage(r,0,0,r.width,r.height,(n.width-r.width)/2,(n.height-r.height)/2,r.width,r.height):g.drawImage(r,0,0,r.width,r.height,(n.width-n.height*i)/2,0,n.height*i,n.height)})},r.src=e.target.result}if("files3"==h){t.fileimg.fimg3=e.target.result;var n;g=(n=document.getElementById("canvas3")).getContext("2d"),r=new Image;n.width=500,n.height=500,r.onload=function(){var i=r.width/r.height;g.clearRect(0,0,500,500),g.fillStyle="rgb(248,244,237)",g.fillRect(0,0,n.width,n.height),EXIF.getData(r,function(){var e=EXIF.getTag(this,"Orientation");if(console.log("orientation",e),e){var t=n.width/2,a=n.height/2,h=0;switch(e){case 3:case 4:h=180,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height);break;case 5:case 6:h=90,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height);break;case 7:case 8:h=-90,g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height)}switch(e){case 2:case 4:case 5:case 7:g.scale(-1,1),g.translate(t,a),g.rotate(h*Math.PI/180),g.drawImage(r,-t,-a,n.height*i,n.height)}switch(e){case 1:g.drawImage(r,0,0,r.width,r.height,0,(n.height-n.width/i)/2,n.width,n.width/i)}}else 1<i?r.width<500?g.drawImage(r,0,0,r.width,r.height,(n.width-r.width)/2,(n.height-r.height)/2,r.width,r.height):g.drawImage(r,0,0,r.width,r.height,0,(n.height-n.width/i)/2,n.width,n.width/i):r.height<500?g.drawImage(r,0,0,r.width,r.height,(n.width-r.width)/2,(n.height-r.height)/2,r.width,r.height):g.drawImage(r,0,0,r.width,r.height,(n.width-n.height*i)/2,0,n.height*i,n.height)})},r.src=e.target.result}}),i.readAsDataURL(a)},drawLoop:function(){var J=this;return new Promise(function(e){var I=document.getElementById("canvas"),u=document.getElementById("canvas2"),y=document.getElementById("canvas3"),b=document.getElementById("drawimg"),M=document.getElementById("drawimg2"),v=document.getElementById("drawimg3"),t=b.getContext("2d"),a=M.getContext("2d"),h=v.getContext("2d"),_=document.getElementById("cutcan1"),W=document.getElementById("cutcan2"),P=document.getElementById("cutcan3"),E=_.getContext("2d"),k=W.getContext("2d"),B=P.getContext("2d");_.width=W.width=P.width=500,_.height=W.height=P.height=500;var L=document.getElementById("ucan1"),R=document.getElementById("ucan2"),x=document.getElementById("ucan3"),C=L.getContext("2d"),X=R.getContext("2d"),D=x.getContext("2d");L.width=R.width=x.width=500,L.height=R.height=x.height=670;var i=document.getElementById("fcan"),T=i.getContext("2d");i.width=1200,i.height=628,T.font="bold 17px 微軟正黑體",T.textAlign="center",T.fillStyle="#e2007d",b.width=500,b.height=500,M.width=500,M.height=500,v.width=500,v.height=500,t.clearRect(0,0,b.width,b.height),a.clearRect(0,0,M.width,M.height),h.clearRect(0,0,v.width,v.height),E.clearRect(0,0,_.width,_.height),k.clearRect(0,0,W.width,W.height),B.clearRect(0,0,P.width,P.height),C.clearRect(0,0,C.width,C.height),X.clearRect(0,0,X.width,X.height),D.clearRect(0,0,D.width,D.height),T.clearRect(0,0,i.width,i.height);var j,q,F,g=new Image,r=new Promise(function(e){g.addEventListener("load",function(){T.drawImage(g,0,0,g.width,g.height,0,0,i.width,i.height),console.log("step1"),e()}),g.src="./images/resultBg.jpg"}),U=new Image,S=new Image,A=new Image,N=new Image,O=new Image,V=new Image,$=new clm.tracker,z=new clm.tracker,G=new clm.tracker;$.init(),z.init(),G.init(),$.start(I);function n(){return new Promise(function(e){var t=$.getCurrentPosition();if($.getCurrentPosition()){var a,h,i=t[1][0]-30,g=t[20][1]-30,r=t[13][0]+30,n=t[7][1]+30;i<=0&&(i=0),g<=0&&(g=0),r>=I.width&&(r=I.width),n>=I.height&&(n=I.height),a=Math.abs(r-i),(h=Math.abs(n-g))<a?a=h:h=a;var s=(t[19][1]+t[20][1]+t[15][1]+t[16][1]-(t[21][1]+t[22][1]+t[17][1]+t[18][1]))/4,d=(t[44][1]+t[50][1])/2-(t[57][1]+t[60][1])/2,o=Math.sqrt(Math.abs(t[44][0]-t[50][0])*Math.abs(t[44][0]-t[50][0])+Math.abs(t[44][1]-t[50][1])*Math.abs(t[44][1]-t[50][1])),m=Math.sqrt(Math.abs(t[44][0]-t[57][0])*Math.abs(t[44][0]-t[57][0])+Math.abs(t[44][1]-t[57][1])*Math.abs(t[44][1]-t[57][1])),c=Math.sqrt(Math.abs(t[57][0]-t[50][0])*Math.abs(t[57][0]-t[50][0])+Math.abs(t[57][1]-t[50][1])*Math.abs(t[57][1]-t[50][1]));Math.acos((c*c+m*m-o*o)/(2*c*m)),Math.PI;d<-.5&&(f=J.resWord.happy),.5<d&&(.5<s&&(f=J.resWord.sad),s<-.5&&(f=J.resWord.angry),s<.499&&-.499<s&&(f=J.resWord.angry)),d<.499&&-.499<d&&(.5<s&&(f=J.resWord.sad),s<-.5&&(f=J.resWord.angry),s<.499&&-.499<s&&(f=J.resWord.sad)),$.draw(b),E.drawImage(I,i,g,a,h,0,0,_.width,_.height),C.drawImage(_,0,0,_.width,_.height,0,0,500,500);var l=Math.floor(Math.random()*f.length);j=J.shuffle(f)[l],J.keyWord.word1=j[0];var w=new Promise(function(e){U.addEventListener("load",function(){e()}),U.src=j[0]}),p=new Promise(function(e){S.addEventListener("load",function(){e()}),S.src=j[1]});Promise.all([w,p]).then(function(){T.drawImage(_,0,0,_.width,_.height,44,265,244,234),T.rotate(-10*Math.PI/180),T.drawImage(U,0,0,U.width,U.height,10,140,.4*U.width,.4*U.height),T.rotate(10*Math.PI/180),C.drawImage(S,0,0,S.width,S.height,0,L.height-170,500,170),J.canvas.ccan1=L.toDataURL("image/jpeg",.8),console.log("step2"),J.gamesec="20%",document.getElementById("progress").style.transform="translateX(20%)",e()}),f.splice(l,1),clearInterval(H),$.stop(),$.reset()}else{var f;J.resWord.all=[],E.drawImage(I,0,0,I.width,I.height,0,0,_.width,_.height),C.drawImage(_,0,0,_.width,_.height,0,0,500,500);for(l=0;l<J.resWord.sad.length;l++)J.resWord.all.push(J.resWord.sad[l]);for(l=0;l<J.resWord.happy.length;l++)J.resWord.all.push(J.resWord.happy[l]);for(l=0;l<J.resWord.angry.length;l++)J.resWord.all.push(J.resWord.angry[l]);f=J.resWord.all;l=Math.floor(Math.random()*f.length);j=J.shuffle(f)[l],J.keyWord.word1=j[0];w=new Promise(function(e){U.addEventListener("load",function(){e()}),U.src=j[0]}),p=new Promise(function(e){S.addEventListener("load",function(){e()}),S.src=j[1]});f.splice(l,1),Promise.all([w,p]).then(function(){T.drawImage(_,0,0,_.width,_.height,44,265,244,234),T.rotate(-10*Math.PI/180),T.drawImage(U,0,0,U.width,U.height,10,140,.4*U.width,.4*U.height),T.rotate(10*Math.PI/180),C.drawImage(S,0,0,S.width,S.height,0,L.height-170,500,170),J.canvas.ccan1=L.toDataURL("image/jpeg",.8),console.log("step2"),J.gamesec="20%",document.getElementById("progress").style.transform="translateX(20%)",e()}),clearInterval(H)}})}var H=setInterval(function(){n()},1e3);z.start(u);function s(){return new Promise(function(e){var t=z.getCurrentPosition();if(z.getCurrentPosition()){var a,h,i=t[1][0]-30,g=t[20][1]-30,r=t[13][0]+30,n=t[7][1]+30;i<=0&&(i=0),g<=0&&(g=0),r>=u.width&&(r=u.width),n>=u.height&&(n=u.height),a=Math.abs(r-i),(h=Math.abs(n-g))<a?a=h:h=a;var s=(t[19][1]+t[20][1]+t[15][1]+t[16][1]-(t[21][1]+t[22][1]+t[17][1]+t[18][1]))/4,d=(t[44][1]+t[50][1])/2-(t[57][1]+t[60][1])/2,o=Math.sqrt(Math.abs(t[44][0]-t[50][0])*Math.abs(t[44][0]-t[50][0])+Math.abs(t[44][1]-t[50][1])*Math.abs(t[44][1]-t[50][1])),m=Math.sqrt(Math.abs(t[44][0]-t[57][0])*Math.abs(t[44][0]-t[57][0])+Math.abs(t[44][1]-t[57][1])*Math.abs(t[44][1]-t[57][1])),c=Math.sqrt(Math.abs(t[57][0]-t[50][0])*Math.abs(t[57][0]-t[50][0])+Math.abs(t[57][1]-t[50][1])*Math.abs(t[57][1]-t[50][1]));Math.acos((c*c+m*m-o*o)/(2*c*m)),Math.PI;d<-.5&&(f=J.resWord.happy),.5<d&&(.5<s&&(f=J.resWord.sad),s<-.5&&(f=J.resWord.angry),s<.499&&-.499<s&&(f=J.resWord.angry)),d<.499&&-.499<d&&(.5<s&&(f=J.resWord.sad),s<-.5&&(f=J.resWord.angry),s<.499&&-.499<s&&(f=J.resWord.sad)),z.draw(M),k.drawImage(u,i,g,a,h,0,0,W.width,W.height),X.drawImage(W,0,0,W.width,W.height,0,0,500,500);var l=Math.floor(Math.random()*f.length);q=J.shuffle(f)[l],J.keyWord.word2=q[0];var w=new Promise(function(e){A.addEventListener("load",function(){e()}),A.src=q[0]}),p=new Promise(function(e){N.addEventListener("load",function(){e()}),N.src=q[1]});Promise.all([w,p]).then(function(){T.drawImage(W,0,0,W.width,W.height,332,300,244,234),T.rotate(-4*Math.PI/180),T.drawImage(A,0,0,A.width,A.height,320,160,.4*A.width,.4*A.height),T.rotate(4*Math.PI/180),X.drawImage(N,0,0,N.width,N.height,0,R.height-170,500,170),J.canvas.ccan2=R.toDataURL("image/jpeg",.8),console.log("step3"),J.gamesec="40%",document.getElementById("progress").style.transform="translateX(40%)",e()}),f.splice(l,1),z.stop(),z.reset()}else{var f;J.resWord.all=[],k.drawImage(u,0,0,u.width,u.height,0,0,W.width,W.height),X.drawImage(W,0,0,W.width,W.height,0,0,500,500);for(l=0;l<J.resWord.sad.length;l++)J.resWord.all.push(J.resWord.sad[l]);for(l=0;l<J.resWord.happy.length;l++)J.resWord.all.push(J.resWord.happy[l]);for(l=0;l<J.resWord.angry.length;l++)J.resWord.all.push(J.resWord.angry[l]);f=J.resWord.all;l=Math.floor(Math.random()*f.length);q=J.shuffle(f)[l],J.keyWord.word2=q[0];w=new Promise(function(e){A.addEventListener("load",function(){e()}),A.src=q[0]}),p=new Promise(function(e){N.addEventListener("load",function(){e()}),N.src=q[1]});Promise.all([w,p]).then(function(){T.drawImage(W,0,0,W.width,W.height,332,300,244,234),T.rotate(-4*Math.PI/180),T.drawImage(A,0,0,A.width,A.height,320,160,.4*A.width,.4*A.height),T.rotate(4*Math.PI/180),X.drawImage(N,0,0,N.width,N.height,0,R.height-170,500,170),J.canvas.ccan2=R.toDataURL("image/jpeg",.8),console.log("step3"),J.gamesec="40%",document.getElementById("progress").style.transform="translateX(40%)",e()}),f.splice(l,1)}})}setTimeout(function(){var e=setInterval(function(){s()},1e3);setTimeout(function(){clearInterval(e)},1e3)},1e3),G.start(y);function d(){return new Promise(function(e){var t=G.getCurrentPosition();if(G.getCurrentPosition()){var a,h,i=t[1][0]-30,g=t[20][1]-30,r=t[13][0]+30,n=t[7][1]+30;i<=0&&(i=0),g<=0&&(g=0),r>=y.width&&(r=y.width),n>=y.height&&(n=y.height),a=Math.abs(r-i),(h=Math.abs(n-g))<a?a=h:h=a;var s=(t[19][1]+t[20][1]+t[15][1]+t[16][1]-(t[21][1]+t[22][1]+t[17][1]+t[18][1]))/4,d=(t[44][1]+t[50][1])/2-(t[57][1]+t[60][1])/2,o=Math.sqrt(Math.abs(t[44][0]-t[50][0])*Math.abs(t[44][0]-t[50][0])+Math.abs(t[44][1]-t[50][1])*Math.abs(t[44][1]-t[50][1])),m=Math.sqrt(Math.abs(t[44][0]-t[57][0])*Math.abs(t[44][0]-t[57][0])+Math.abs(t[44][1]-t[57][1])*Math.abs(t[44][1]-t[57][1])),c=Math.sqrt(Math.abs(t[57][0]-t[50][0])*Math.abs(t[57][0]-t[50][0])+Math.abs(t[57][1]-t[50][1])*Math.abs(t[57][1]-t[50][1]));Math.acos((c*c+m*m-o*o)/(2*c*m)),Math.PI;d<-.5&&(f=J.resWord.happy),.5<d&&(.5<s&&(f=J.resWord.sad),s<-.5&&(f=J.resWord.angry),s<.499&&-.499<s&&(f=J.resWord.angry)),d<.499&&-.499<d&&(.5<s&&(f=J.resWord.sad),s<-.5&&(f=J.resWord.angry),s<.499&&-.499<s&&(f=J.resWord.sad)),G.draw(v),B.drawImage(y,i,g,a,h,0,0,P.width,P.height),D.drawImage(P,0,0,P.width,P.height,0,0,500,500);var l=Math.floor(Math.random()*f.length);F=J.shuffle(f)[l],J.keyWord.word3=F[0];var w=new Promise(function(e){O.addEventListener("load",function(){e()}),O.src=F[0]}),p=new Promise(function(e){V.addEventListener("load",function(){e()}),V.src=F[1]});Promise.all([w,p]).then(function(){T.drawImage(P,0,0,P.width,P.height,608,278,244,234),T.rotate(9*Math.PI/180),T.drawImage(O,0,0,O.width,O.height,630,0,.4*O.width,.4*O.height),T.rotate(-9*Math.PI/180),D.drawImage(V,0,0,V.width,V.height,0,x.height-170,500,170),J.canvas.ccan3=x.toDataURL("image/jpeg",.8),console.log("step4"),J.gamesec="60%",document.getElementById("progress").style.transform="translateX(60%)",e()}),f.splice(l,1),G.stop(),G.reset()}else{var f;J.resWord.all=[],B.drawImage(y,0,0,y.width,y.height,0,0,P.width,P.height),D.drawImage(P,0,0,P.width,P.height,0,0,500,500);for(l=0;l<J.resWord.sad.length;l++)J.resWord.all.push(J.resWord.sad[l]);for(l=0;l<J.resWord.happy.length;l++)J.resWord.all.push(J.resWord.happy[l]);for(l=0;l<J.resWord.angry.length;l++)J.resWord.all.push(J.resWord.angry[l]);f=J.resWord.all;l=Math.floor(Math.random()*f.length);F=J.shuffle(f)[l],J.keyWord.word3=F[0];w=new Promise(function(e){O.addEventListener("load",function(){e()}),O.src=F[0]}),p=new Promise(function(e){V.addEventListener("load",function(){e()}),V.src=F[1]});Promise.all([w,p]).then(function(){T.drawImage(P,0,0,P.width,P.height,608,278,244,234),T.rotate(9*Math.PI/180),T.drawImage(O,0,0,O.width,O.height,630,0,.4*O.width,.4*O.height),T.rotate(-9*Math.PI/180),D.drawImage(V,0,0,V.width,V.height,0,x.height-170,500,170),J.canvas.ccan3=x.toDataURL("image/jpeg",.8),console.log("step4"),J.gamesec="60%",document.getElementById("progress").style.transform="translateX(60%)",e()}),f.splice(l,1)}})}setTimeout(function(){var e=setInterval(function(){d()},1e3);setTimeout(function(){clearInterval(e)},1e3)},1500),r.then(function(){Promise.all([n,s,d]).then(function(){setTimeout(function(){console.log("step5"),J.canvas.fcan=i.toDataURL("image/jpeg",.8),J.gamesec="80%",document.getElementById("progress").style.transform="translateX(80%)",J.saveImg(),e()},4e3)})}),document.addEventListener("clmtrackrNotFound",function(e){$.stop(),z.stop(),G.stop()},!1)})},long_text:function(e,t,a,h){for(var i="",g=0,r=e.length,n=e.split(""),s=t,d=0;d<r+1;d++){8<=g?(s.fillText(i,a,h),h+=35,i="",g=0):s.fillText(i,a,h);i=i+n[0];g++,n.shift()}},shuffle:function(e){var t,a,h;for(t=e.length-1;0<t;t--)a=Math.floor(Math.random()*(t+1)),h=e[t],e[t]=e[a],e[a]=h;return e},playAgain:function(){window.location="./game.html"},fbLogin:function(){var e=this;if(""==e.fileimg.fimg1||""==e.fileimg.fimg2||""==e.fileimg.fimg3||0==e.agree)return e.popup=!0,e.popEvent="type",void(e.popPage="picerr");e.popup=!0,e.loading=!0,e.drawLoop()},saveImg:function(){var e=this,t=window.localStorage;t.setItem("shareImg",e.canvas.fcan),t.setItem("userImg1",e.canvas.ccan1),t.setItem("userImg2",e.canvas.ccan2),t.setItem("userImg3",e.canvas.ccan3),t.setItem("keyword1",e.keyWord.word1),t.setItem("keyword2",e.keyWord.word2),t.setItem("keyword3",e.keyWord.word3),e.gamesec="100%",document.getElementById("progress").style.transform="translateX(100%)",window.location.href="./result.html"}},mounted:function(){var e,t,a,h;$("body").loadpage("init",{async:!1}),window.fbAsyncInit=function(){FB.init({appId:"2287821511516890",status:!0,cookie:!0,xfbml:!1,version:"v5.0"})},e=document,t="facebook-jssdk",h=e.getElementsByTagName("script")[0],e.getElementById(t)||((a=e.createElement("script")).id=t,a.src="https://connect.facebook.net/en_US/sdk.js",h.parentNode.insertBefore(a,h))}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
